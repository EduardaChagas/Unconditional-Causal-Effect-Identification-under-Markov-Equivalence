all.buckets[[i]][length(all.buckets[[i]])+1] = w
w = min(which(v[w,] == 0))
}
}
}
}
}
bbuckets = vector("list", dim(v)[1])
for(i in c(1:length(bbuckets))){
bbuckets[[i]] = all.buckets[[i]] # Pego a lista
if(length(all.buckets[[i]]) > 0){ # Analiso se a lista tá vazia ou não
for(j in c(1:length(bbuckets[[i]]))){ #Percorro todos os elementos da lista
for(w in c(1:length(all.buckets))){
if(length(which(all.buckets[[w]] == bbuckets[[i]][j])) > 0 && length(which(all.buckets[[i]] == w)) > 0 && w != j){
bbuckets[[i]] = unique(c(bbuckets[[i]], all.buckets[[w]]))
}
}
}
}
}
mbbuckets = vector("list", dim(v)[1])
total = 0
for(i in c(1:length(bbuckets))){
if(length(bbuckets[[i]]) > 0){
if(total == 0){
total = total + 1
mbbuckets[[total]] = bbuckets[[i]]
}
else{
for(j in c(1:total)){
if(length(which(bbuckets[[i]] %in% mbbuckets[[total]] == T)) > 0){
mbbuckets[[total]] = unique(bbuckets[[i]],mbbuckets[[total]])
}
else{
total = total + 1
mbbuckets[[total]] = bbuckets[[i]]
}
}
}
}
}
bbuckets = vector("list", total)
for(i in c(1:total)){
bbuckets[[i]] = mbbuckets[[i]]
}
bbuckets
}
pc.component <- function(b, v){
b = unlist(b)
v = V[b,b]
total.colliders = 0
colliders = list()
if(length(b) > 1){
for(i in c(1:length(b))){
if((length(which(v[i,] == 2)) == 0 && length(which(v[,i] != -1)) > 1) || length(which(v[i,] == -1)) == length((v[i,]))-1){
total.colliders = total.colliders + 1
colliders[[total.colliders]] = i
}
}
}
else{
colliders = v
}
colliders
}
IDP <- function(X,Y,V){
px = Pvx(X, V)
d = An(Y, px)
t = c(1:dim(V)[1])
pxy = identify(c = d, t = t, q = v)
pxy
}
identify <- function(c, t, q){
print(c)
print(t)
if(length(c) == 0){
print("FALSE")
return(1)
}
if(all(c,t) && length(c) == length(t)){
print(q)
return(q)
}
TC = t[-c]
B = unlist(buckets(q))
if(check.proposition2(B, TC, q)){
q = Pvx(B, t)
return(identify(c, t[-B],q))
}
else if(check.proposition3(B, c, q, option = 1)){
rb = check.proposition3(B, c, q, 2)
rcrb = check.proposition3(B, c[-rb], q, 2)
rb.rcrb = intersect(rb,rcrb)
return((identify(rb, t, q) * identify(rcrb, t, q))/(identify(rb.rcrb, t, q)))
}
else{
print("FALHA")
return(FALSE)
}
}
region.calculate <- function(b, pc){
region = list()
n.regions = 0
for(i in c(1:length(b))){
cb = pc.component(unlist(b[[i]]), pc)
cb = c[unlist(cb)]
if(length(cb) > 0){
n.regions = n.regions + 1
region[[n.regions]] = cb
}
}
region
}
check.proposition3 <- function(b, c, v, option){
region = c()
pc = v[c,c]
region = region.calculate(b, pc)
for(i in c(1:length(region))){
if((length(intersect(b[[i]], c)) == length(b[[i]])) && (length(intersect(region[[i]], c))) != length(c)){
if(option == 1)
return(T)
else
return(region[[i]])
}
}
return(F)
}
check.proposition2 <- function(b, t, v){
for(i in c(1:length(b))){
if(length(intersect(b[[i]],t)) == length(b[[i]])){
cb = pc.component(b[[i]], v)
children = Ch(b[[i]], v)
int = intersect(cb, children)
if(length(int) > 0){
if(length(b[[i]][-int]) == length(int))
return(T)
}
}
}
return(F)
}
## Illustrative example
## Nomeclature
## -1 = nonexistent edge
## 0 = circle edge
## 1 = directed edge
## 2 = v (visible edges)
nodes <- c('X1','X2','Y1','Y2','Y3','Y4','Y5')
X <- c(1:2)
Y <- c(3:7)
V <- matrix(-1, nrow = length(nodes), ncol = length(nodes))
## Determining the connections
V[which(nodes == 'X1'), which(nodes == 'X2')] = 1
V[which(nodes == 'X1'), which(nodes == 'Y1')] = 1
V[which(nodes == 'X1'), which(nodes == 'Y3')] = 1
V[which(nodes == 'X2'), which(nodes == 'X1')] = 1
V[which(nodes == 'X2'), which(nodes == 'Y1')] = 1
V[which(nodes == 'X2'), which(nodes == 'Y2')] = 2
V[which(nodes == 'Y1'), which(nodes == 'X2')] = 1
V[which(nodes == 'Y1'), which(nodes == 'Y5')] = 0
V[which(nodes == 'Y2'), which(nodes == 'Y3')] = 1
V[which(nodes == 'Y3'), which(nodes == 'Y2')] = 1
V[which(nodes == 'Y3'), which(nodes == 'Y4')] = 0
V[which(nodes == 'Y4'), which(nodes == 'Y3')] = 1
V[which(nodes == 'Y4'), which(nodes == 'Y5')] = 0
V[which(nodes == 'Y5'), which(nodes == 'Y1')] = 1
V[which(nodes == 'Y5'), which(nodes == 'Y4')] = 0
IDP(X,Y,V)
check.proposition3(B, c, q, option = 1)
rb = check.proposition3(B, c, q, 2)
rcrb = check.proposition3(B, c[-rb], q, 2)
rb.rcrb = intersect(rb,rcrb)
rb
rcrb
rb.rcrb
c[-rb]
b = B
vc = c[-rb]
c = c[-rb]
v =
q
region = c()
pc = v[c,c]
region = region.calculate(b, pc)
region
length(region)
i = 1
length(intersect(b[[i]], c)) == length(b[[i]])
intersect(b[[i]], c)
c
px = Pvx(X, V)
d = An(Y, px)
t = c(1:dim(V)[1])
c = d
rb = check.proposition3(B, c, q, 2)
c = c[-rb]
c
rb = check.proposition3(B, c, q, 2)
c[-rb]
rb
px = Pvx(X, V)
d = An(Y, px)
t = c(1:dim(V)[1])
c = d
t = t
q = v
length(c) == 0
all(c,t) && length(c) == length(t)
TC = t[-c]
B = unlist(buckets(q))
check.proposition2(B, TC, q)
check.proposition3(B, c, q, option = 1)
rb = check.proposition3(B, c, q, 2)
c[-rb]
rb[]
rb
c
c[-rb]
c
rb
rb = check.proposition3(B, c, q, 2)
rb
c
c-rb
c[rb]
t = t
t
TC = t[-c]
TC
c
px = Pvx(X, V)
d = An(Y, px)
t = c(1:dim(V)[1])
c = d
t = t
q = v
length(c) == 0
all(c,t) && length(c) == length(t)
TC = t[-c]
B = unlist(buckets(q))
check.proposition2(B, TC, q)
check.proposition3(B, c, q, option = 1)
rb = check.proposition3(B, c, q, 2)
c
c[c(3,4,5)]
c[-c(3,4,5)]
px = Pvx(X, V)
d = An(Y, px)
t = c(1:dim(V)[1])
cc = d
t = t
q = v
length(cc) == 0
all(cc,t) && length(cc) == length(t)
TC = t[-cc]
B = unlist(buckets(q))
check.proposition2(B, TC, q)
check.proposition3(B, cc, q, option = 1)
rb = check.proposition3(B, cc, q, 2)
rb
rcrb = check.proposition3(B, cc[-rb], q, 2)
rcrb
cc[-rb]
cc
rb
cc[-intersect(cc,rb)]
cc[2]
cc[2] == rb[1]
cc[-rb]
a = c(1:7)
b = c(5:8)
a[-b]
rb = check.proposition3(B, cc, q, 2)
rb
cc
cc[-rb]
cc[-c(4:7)]
cc[-4]
cc[-c(4)]
get.diferent <- funtion(a,b){
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j])
equal = T
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
return(unlist(r))
}
get.diferent <- funtion(a,b){
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j])
equal = T
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
return(unlist(r))
}
get.diferent <- funtion(a,b){
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j])
equal = T
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
return(unlist(r))
}
get.diferent <- funtion(a,b){
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j])
equal = T
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
return(unlist(r))
}
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j])
equal = T
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
return(unlist(r))
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j])
equal = T
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
r = unlist(r)
return(r)
get.diferent <- funtion(a,b){
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j])
equal = T
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
r = unlist(r)
r
}
get.diferent <- funtion(a,b){
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j])
equal = T
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
r = unlist(r)
r
}
get.diferent <- funtion(a,b){
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j]){
equal = T
}
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
r = unlist(r)
r
}
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j]){
equal = T
}
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
r = unlist(r)
r
get.diferent <- funtion(a,b){
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j]){
equal = T
}
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
r = unlist(r)
r
}
px = Pvx(X, V)
d = An(Y, px)
t = c(1:dim(V)[1])
cc = d
t = t
q = v
length(cc) == 0
all(cc,t) && length(cc) == length(t)
TC = t[-cc]
B = unlist(buckets(q))
check.proposition2(B, TC, q)
check.proposition3(B, cc, q, option = 1)
rb = check.proposition3(B, cc, q, 2)
cc
rb
get.diferent(cc,rb)
get.diferent <- funtion(a,b){
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j]){
equal = T
}
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
r = unlist(r)
r
}
get.diferent(cc,rb)
diferent <- funtion(a,b){
r = list()
t = 0
for(i in c(1:length(a))){
equal = F
for(j in c(1:length(b))){
if(a[i] == b[j]){
equal = T
}
}
if(equal){
t = 1 + 1
r[[t]] = a[i]
}
}
r = unlist(r)
r
}
get.diferent(cc,rb)
